const StreamTypeEnum = {
	adTypeBinary: 1,
	adTypeText: 2
}

const ConnectModeEnum = {
	adModeRead: 1,
	adModeReadWrite: 3,
	adModeRecursive: 0x400000,
	adModeShareDenyNone: 16,
	adModeShareDenyRead: 4,
	adModeShareDenyWrite: 8,
	adModeShareExclusive: 12,
	adModeUnknown: 0,
	adModeWrite: 2
}

const SaveOptionsEnum = {
	adSaveCreateNotExist: 1,
	adSaveCreateOverWrite: 2
}

/*
	charset: 如果不指定charset，则读入bytes
*/
function readFile(path, charset) {
	let stream = CreateObject('ADODB.Stream')
	let result
	try {
		if (!charset) { //读入bytes
			stream.Type = StreamTypeEnum.adTypeBinary
			stream.Mode = ConnectModeEnum.adModeReadWrite
			stream.Open()
			stream.LoadFromFile(path)
			result =VariantToArrayBuffer(stream.Read())
			stream.Close()
		} else {
			stream.Type = StreamTypeEnum.adTypeText
			stream.Mode = ConnectModeEnum.adModeReadWrite
			stream.Charset = charset
			stream.Open()
			stream.LoadFromFile(path)
			stream.Position = 0
			result = stream.ReadText(-1)
		}
		return result
	} catch (e) {
		console.log(e)
		return null
	}
}

/*
	如果不指定charset，则写出bytes
*/
function writeFile(path, data, charset) {
	let stream = CreateObject('ADODB.Stream')
	if (!charset) {
		stream.Type = StreamTypeEnum.adTypeBinary
		stream.Mode = ConnectModeEnum.adModeReadWrite
		stream.Open()
		let type = TypeOf(data)
		if (['ArrayBuffer', 'TypedArray', 'DataView'].includes(type)) data = ArrayBufferToVariant(data)
		stream.Write(data)
		stream.SaveToFile(path, 2)
		stream.Close()
	} else {
		stream.Type = StreamTypeEnum.adTypeText
		stream.Mode = ConnectModeEnum.adModeReadWrite
		stream.Charset = charset
		stream.Open()
		if (data !== '') stream.WriteText(data)
		stream.SaveToFile(path, 2)
		stream.Close()
	}
}

function Base64ToBin(base64str) {
	let xml = CreateObject('Microsoft.XMLDOM')
	let node = xml.createElement('binary')
	node.dataType = 'bin.base64'
	node.text = base64str
	return node.nodeTypedValue
}

module.exports = {
	readFile: readFile,
	writeFile: writeFile,
	Base64ToBin: Base64ToBin,
}
