const INPUT_TYPES = {
    EXCEL_CELLS: 'Excel Cells',
    WORD_ELEMENT: 'Word Element',
    FILENAME: 'Filename',
    SCRIPT: 'Script',
}

const ax = require('activex')
const _ = require('lodash')

function main(input, input_type, output, output_type, code) {
    try {
        let _in;
        let _out;
        if (input_type === INPUT_TYPES.EXCEL_CELLS) {
            let excel = GetObject('', 'Excel.Application');
            _in = ax.toArray(excel.ActiveSheet.Range(input));
        } else if (input_type === INPUT_TYPES.WORD_ELEMENT) {
            let word = GetObject('', 'Word.Application')
            _in = ax.toArray(eval('word.ActiveDocument.' + input))
        } else if (input_type === INPUT_TYPES.FILENAME) {
            if (path.fileexists(input)) {
                _in = fs.open(input).readlines
                length = _in.length;
            } else { //如果是文件通配符或目录名，返回所有文件名
                _in = fs.getfiles(input)
                length = _in.length
            }
        } else if (input_type === INPUT_TYPES.SCRIPT) {
            _in = eval(input)
        }

        if (output_type === INPUT_TYPES.EXCEL_CELLS) {
            let excel = GetObject('', 'Excel.Application')
            _out = excel.ActiveSheet.Range(output)
        } else { //作为纯文本
            _out = output
        }
        _in.forEach((e, i, arr) => {
            let ret = eval(code);
            if (output_type === INPUT_TYPES.EXCEL_CELLS) {
                if (Array.isArray(ret)) {
                    _out.Offset(i, 0).Resize(1, ret.length).Value = ax.toVBArray(ret);
                }
                else if (!_.isEmpty(ret))
                    _out(i, 1).Value = ret

            }
        });
    } catch (e) {
        console.log('%o', e)
    }

}

globalThis.main = main;